DAO 정의
Data Aceess Object의 약자.DB를 사용하기위한 객체이다.


DB와 연결하기 위해서 매번 DB연결을 위한 소스를 추가하고 객체를 생성해야하는데  이것을 해결하기 위해 
사용하는것이 DAO이다. DAO는 ConnectionPool이라고도 하는데 connection 객체를 미리 만들어 놓고 필요 할 때마다 
가져다 쓰는 것을 말한다. 

DB에 대한 접근을 DAO가 담당하도록 하여 데이터베이스 엑세스를 DAO에서만 하게 되면 다수의 원격호출을 통한 오버헤드를 
VO나 DTO를 통해 줄일 수 있고 다수의 DB 호출문제를 해결할 수 있다.
또한 단순히 읽기만 하는 연산이므로 트랜잭션 간의 오버헤드를 감소할 수 있다.

-------------------------------------------------------------------------------------------------------------------------

사용 방법
Step
1)
class를 만든 후에 member 변수로 8가지 단계중 1단계(변수 설정)을 해준다.

2)
생성자로 2단계(jdbc 드라이버 로딩되어 있는지 여부 체크)를 해준다. 

3)
SQL문장에 따라서 METHOD들을 만들어 준다. 여기에서는 8가지 단계중 
   3.연결(connection)
   4.sql문 작성
   5.문장 객체 생성
   6.실행(select ==> resultset)
   7.레코드별 처리,다음 레코드로 이동
     
     단계 전부를 해준다. 
 TABLE SELECTALL METHOD     <-SELECT ALL은 VO를 써주어야한다.
 TABLE UPDATE    METHOD
 TABLE INSERT    METHOD
 TABLE DELETE    METHOD
     
4)
자원을 반납할 METHOD를 만들어준다. 




EX)

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import VO.DeptVO;

public class DeptDAO {

	// 멤버변수 DB연결
	// 1.변수선언
	String driver = "oracle.jdbc.driver.OracleDriver";
	String user = "scott";
	String password = "tiger";
	String url = "jdbc:oracle:thin:@192.168.0.35:1521:orcl";
	PreparedStatement pstmt = null;
	Connection conn = null;
	StringBuffer sb = new StringBuffer();
	ResultSet rs = null;
	DeptVO vo = null;

	public DeptDAO() {

		try {
			Class.forName(driver);
			conn = DriverManager.getConnection(url, user, password);
		} catch (ClassNotFoundException e) {
			System.out.println("드라이버 로딩 실패");
		} catch (SQLException e) {
			System.out.println("DB연결 실패");
		}

	}// CONSTRUCTOR END

	// 전체조회
	public ArrayList<DeptVO> selectAll() {
		ArrayList<DeptVO> list = new ArrayList<DeptVO>();
		sb.setLength(0);
		sb.append("SELECT DEPTNO,DNAME,LOC ");
		sb.append("FROM dept ");

		try {
			pstmt = conn.prepareStatement(sb.toString());
			rs = pstmt.executeQuery();
			while (rs.next()) {
				int deptno = rs.getInt("deptno");
				String dname = rs.getString("dname");
				String loc = rs.getString("loc");
				DeptVO vo = new DeptVO();
				vo.setDeptno(deptno);
				vo.setDname(dname);
				vo.setLoc(loc);
				list.add(vo);
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return list;

	}

	// 1건 조회(7788번 부서정보 가져오기)
	public DeptVO selectOne(int deptno) {// 3번째시간 40분부터 녹음파일

		// 4.sql문 작성
		sb.append("SELECT deptno,dname,loc ");
		sb.append("FROM dept ");
		sb.append("where deptno = ?");
		// 5.문장 객체 생성
		try {
			pstmt = conn.prepareStatement(sb.toString());
			pstmt.setInt(1, deptno);
			// 6.실행(select ==> ResultSet)
			rs = pstmt.executeQuery();
//7.레코드별 처리 
			rs.next();
			String dname = rs.getString("dname");
			String loc = rs.getString("loc");
			System.out.println(deptno);
			System.out.println(dname);
			System.out.println(loc);

			vo = new DeptVO(); // vo객체를 만들어 setter로 값을 담은 다음 돌려줌
			vo.setDeptno(deptno);
			vo.setDname(dname);
			vo.setLoc(loc);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return vo;

	}// selectOne() end


	public void insertOne(String dname, String loc) {
		// 4.sql문 작성
		sb.setLength(0);// 기존에 있는 문장을 제거하기. //4번째시간 처음 부분 녹음
		sb.append("INSERT INTO DEPT ");
		sb.append("VALUES (DEPT_DEPTNO.NEXTVAL,?,?)"); // <-다음 번호값을 주도록 해준다.

		// 5.문장 객체 생성
		try {
			pstmt = conn.prepareStatement(sb.toString());
			pstmt.setString(1, dname);
			pstmt.setString(2, loc);
			pstmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// 6.실행(select ==> resultset)
		// 7.레코드별 처리,다음 레코드로 이동
	}// insertOne method end

	public void deleteOne(int deptno) {
		sb.setLength(0);
		sb.append("delete dept ");
		sb.append("where deptno=?");

		try {
			pstmt = conn.prepareStatement(sb.toString());
			pstmt.setInt(1, deptno);
			pstmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	
	public void updateOne(int deptno, String dname, String loc) {
		sb.setLength(0);
		sb.append("UPDATE dept ");
		sb.append("SET dname=?,loc=? ");
		sb.append("where deptno = ? ");

		try {
			pstmt = conn.prepareStatement(sb.toString());
			pstmt.setString(1, dname);
			pstmt.setString(2, loc);
			pstmt.setInt(3, deptno);
			pstmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	

	public void close() {
		if (rs != null)
			try {
				rs.close();
				if (pstmt != null)     <-null이 되면 참조값이 없으니까! 자원반납이라는 것은 참조값이 있어서 따라 들어갔을때 정보가 있어야 반납할 수 있는 것이다.
					pstmt.close();
				if (conn != null)
					conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

	}
}
 

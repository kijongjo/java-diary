요약
제어문 정의                 문장의 흐름 제어
for문                      for(초기식;조건식;증감식){} 
while문                    while(조건 참 실행 거짓 비실행){문장1; 문장2;}
do{}while문                do {문장1; 문장2;}while(조건 실행한 다음 조건 만족하면 다시 반복, 만족하지 않으면 탈출);
반복문 비교                for while 상황에따라  while do while 실행횟수에 따라
중첩                       반복문을 중첩하는것 반복문{반복문{}}
조건 분기문               if(조건){문장1,2}else{문장3,4}  swtich(사용자입력){case 숫자 break; default 숫자 break;}
break와 continue          if(조건) break; if(조건) continue; if(조건) continue  
제어문이란?
문장의 흐름을 제어한다. 제어문 카테고리에 반복문이 속하고 있다.
-----------------------------------------------------------------------------------------------------------------------------------
for문
for(초기식;조건식;증감식){}
		// 초기식 : for문에서 사용될 변수에 초기값을 할당한다.
		// 조건식 : 조건식의 결과값은 논리값으로 true이면
	  // 증감식 : for문에서 사용될 변수를 증가, 감소 처리 해준다
    // {}안에 문장을 실행하고 false이면 완전히 빠져나간다. 
    단,{}를 삭제해도 기능이 실행되는데 바로 아래 실행 명령어만 실행된다.
    
 *문장에서 가장 찾기 쉬운 에러는?
 syntax 에러, 런타임성 에러
 
  만약 for문을 빠져나가면 변수 정의는 어떻게 될까?
   {}를 빠져나가면 변수의 정의 자체는 존재하지 않게 된다 . 
   자기가 정한 구역 안에서만 존재한다.
  ex)
  for (int i = 1; i <= 9; i++) {                          <-int i라고 해도 되고 밖에서 i를 정의한후 i만 써도 된다.
			System.out.println("3*" + i + "=" + i * 3);
		}
	 이후에 쓰는 i는 에러가 난다.                             <-지역 변수라고한다.
-----------------------------------------------------------------------------------------------------------------------------------
while문
while(조건) {문장1; 문장2; 참 실행 거짓 비실행 }
		 
ex)
int i = 1;
while (i <= 9) {
    System.out.println("3*" + i + "=" + 3 * i); // 여기까지만 쓰면 반복문 탈출 못한다
    i++; // 여기 까지 해야 탈출가능 수가증가하니 거짓까지 진행 할 수 있음.                <-중요하다
}
		
-----------------------------------------------------------------------------------------------------------------------------------
do while 문

do {문장1; 문장2;}while(조건 실행한 다음 조건 만족하면 다시 반복, 만족하지 않으면 탈출);


ex)
 int j=1;
        do {
        	System.out.println("3*"+j+"="+3*j);
         	 j++;
        }while(j<=9);                                   <- do while에는 while에 콤마 붙인다.

-----------------------------------------------------------------------------------------------------------------------------------
3가지 반복문의 비교 
  for문                                      while문                                    do~   while문 
 횟수정해져있을때                       특정 상황이 주어질 때
                                    조건 만족 안하면 1번도 실행 안함                조건 만족 안해도 한번은 실행  
-----------------------------------------------------------------------------------------------------------------------------------
중첩이란?
반복문을 한 문장 안에 겹쳐 사용해 원하는 값 출력
반복문{반복문{}}

*대표문제
ex 1 
   11 
   111 
   1111 
   11111의 명령어는
 중첩을 이용해 하기

		System.out.print("1"); // println print line next의 약자로 엔터가 존재한다. 띄어쓰기가 된다.
		System.out.print("2"); // print는 엔터가 없어서 값만 찍는다. 이어져서 나온단 소리이다.
		System.out.println();
		System.out.print("3");
		System.out.println("4");

		for (int i = 1; i <= 5; i++) {
			for (int j = 1; j <= i; j++) {
				System.out.print("1");
			} 
			System.out.println();
		}

---------------------------------------------------------------------------------------------------------------
조건 분기문이란 ?
특정 조건에 따라 다른 문장을 실행시키고자 할때 사용한다.


프로그램은 절차지향이다. 하지만 선택적으로 실행하고 싶을 수 있을 때 조건분기문을 사용한다 .

 if(조건) {
	 문장1;
	 문장2;
                               <-특정 조건을 만족하면 {}안의 문장1,2을 실행한다 .
 }else if(조건){               <-if조건을 만족하지 않는다면 else의 if조건을 만족하는지 보고 {}문장3,4를 실행한다.
  문장3;
  문장4;
 }else{                        <-else if도 만족하지 않는다면 else의 {} 문장 5,6을 실행한다.      
  문장5; 
  문장6;
 }


ex)

public class StatementEx6 {// main method 시작      
                                          //sysout in 을 사용하기위한 옵션
	public static void main(String[] args) throws IOException {

		System.out.print("숫자 입력:");
		int value = System.in.read();
		System.out.println(value);
		 value-=48;
		 System.out.println(value);
		 int result = value%2;                           <-value에서 2를 나눈 나머지 값
		 if(result == 0) {                               <-result=0은 대입이라 x
			   System.out.println(value + "는 짝수");
		 }else{
			  System.out.println(value+"는 홀수");
		 }
                 
		 결과값
		 숫자 입력:5
                  53
                  5
                  5는 홀수


                
       
	}

}

------------------------------------------------------------------------------------------------------------------------------
switch case문
 swtich(사용자입력){case 숫자 break; default 숫자 break;}
 
 사용자 입력창에서 점수 혹은 어떠한 문자를 입력하게 되면 
  case에서 그것에 맞는 것을 찾아본후 특정 지점부터 끝까지 출력을 하게 된다 .
  끝까지 출력하는 것을 막기위해 case마다 break를 사용해 막을 수도 있다. 
  또한 case의 경우엔 그 언저리 값은 같다고 보지 않고 정확하게 같은 값만 적용하기 때문에
  수의 경우엔 점수/10을 해주어 그 몫으로 case를 지정해 언저리 값들을 포함시킨다.(int 값들의 나눗셈들은 int로 정수로 나온다.) 
  default는 case로 지정하지 않은 그 이하의 값들은 모두 하나로 출력하도록 만든 것이다.
  
  
ex)
import java.util.Scanner;

//switch case문
public class StatementEx9 {
	public static void main(String[] args) {
		System.out.println("성적입력:");
		Scanner sc = new Scanner(System.in);
		int score = sc.nextInt();            // 문자 읽어오는것은 next
        //if else로도 얻을 수 있음.
		switch (score) { // <- switch(입력값[스위치]){조건에따른 결과값}
		case 100:        // case 10:         // <- 계속 실행하는 것을 막기위해 break 명령어 사용 
			         //명령어중 아래 출력문장은 99와 같으니 case10만 입력해도 된다.
			System.out.println("A학점"); // 99입력하면 CASE99로 가서 A학점 뽑고 그 밑으로 계속 실행하게 된다. 결과값 성적입력 99 A학점 B학점
			break;   // <- 계속 실행하는 것을 막기위해 break 명령어 사용
		case 99://case 9:
			System.out.println("A학점"); // <-점수가 무엇이냐에 따라 값이 다르게 하는것
			break;
		case 80://case8:
			System.out.println("B학점"); // 하지만 98점은 안나온다 즉 스위치문은 점수가 딱 case에 맞는 것만 나온다.
			break;                      // 이를위해 score를 /10을 하게되면 몫은 9 ,10 8 등이 되는데 이를 이용해 범위를 지정할 수있다.
			                            // 93/10 은 java에선 인트끼리의 계산이기 때문에 9이다.
		
		default:
			System.out.println("F학점"); // case이외의 것들은 default 값으로 정의 내려버릴 수있다.
		   break;
		
		}

	}
}
---------------------------------------------------------------------------------------------------------------

break와 continue          
if(조건) break; if(조건) continue; if(조건) continue ;  if(조건) break 라벨;

4가지가 존재한다 
if(조건) break;
for{
for{
if() break 에서 조건에 맞추어 break가 발동되면 break가 포함되어있는 가장 작은 for문을 탈출하게 된다 .
   }
}

if(조건) continue;
for{
for{
if() continue 에서 조건에 맞추어 continue가 발동되면 그 조건에 맞는 부분의 명령어만 제외되고 나머지가 출력된다.
   }
}

if(조건) continue 라벨
라벨
for{
for {
if()continue 라벨 에서 조건에 맞추어 continue가 발동되면 그 부분을 건너뛰고 명령어의 눈은 for문의 첫번째를 읽게 된다 .
    }
}

ex)
jay
   조건  i(jay label)  ==  j
         1                1 x <-조건 만족
         1                2 x <- 출력안하고 
	 2                1 o <-i가 바로 바뀌게된다
   
if(조건) break; 라벨
continue label과 같은데
조건을 만족하게 되면 아예 멈추게 된다 

예 
    i(jay label) == j 
    1               1x   <-조건을 만족
    1               2x  <- 
    1               3x
    
    
    

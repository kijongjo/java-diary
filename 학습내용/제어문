요약
제어문 정의                 문장의 흐름 제어
for문                      for(초기식;조건식;증감식){} 
while문                    while(조건 참 실행 거짓 비실행){문장1; 문장2;}
do{}while문                do {문장1; 문장2;}while(조건 실행한 다음 조건 만족하면 다시 반복, 만족하지 않으면 탈출);
반복문 비교                for while 상황에따라  while do while 실행횟수에 따라
중첩                       반복문을 중첩하는것 반복문{반복문{}}
조건 분기문               if(조건){문장1,2}else{문장3,4}
제어문이란?
문장의 흐름을 제어한다. 제어문 카테고리에 반복문이 속하고 있다.
-----------------------------------------------------------------------------------------------------------------------------------
for문
for(초기식;조건식;증감식){}
		// 초기식 : for문에서 사용될 변수에 초기값을 할당한다.
		// 조건식 : 조건식의 결과값은 논리값으로 true이면
	  // 증감식 : for문에서 사용될 변수를 증가, 감소 처리 해준다
    // {}안에 문장을 실행하고 false이면 완전히 빠져나간다. 
    단,{}를 삭제해도 기능이 실행되는데 바로 아래 실행 명령어만 실행된다.
    
 *문장에서 가장 찾기 쉬운 에러는?
 syntax 에러, 런타임성 에러
 
  만약 for문을 빠져나가면 변수 정의는 어떻게 될까?
   {}를 빠져나가면 변수의 정의 자체는 존재하지 않게 된다 . 
   자기가 정한 구역 안에서만 존재한다.
  ex)
  for (int i = 1; i <= 9; i++) {                          <-int i라고 해도 되고 밖에서 i를 정의한후 i만 써도 된다.
			System.out.println("3*" + i + "=" + i * 3);
		}
	 이후에 쓰는 i는 에러가 난다.                             <-지역 변수라고한다.
-----------------------------------------------------------------------------------------------------------------------------------
while문
while(조건) {문장1; 문장2; 참 실행 거짓 비실행 }
		 
ex)
int i = 1;
while (i <= 9) {
    System.out.println("3*" + i + "=" + 3 * i); // 여기까지만 쓰면 반복문 탈출 못한다
    i++; // 여기 까지 해야 탈출가능 수가증가하니 거짓까지 진행 할 수 있음.                <-중요하다
}
		
-----------------------------------------------------------------------------------------------------------------------------------
do while 문

do {문장1; 문장2;}while(조건 실행한 다음 조건 만족하면 다시 반복, 만족하지 않으면 탈출);


ex)
 int j=1;
        do {
        	System.out.println("3*"+j+"="+3*j);
         	 j++;
        }while(j<=9);                                   <- do while에는 while에 콤마 붙인다.

-----------------------------------------------------------------------------------------------------------------------------------
3가지 반복문의 비교 
  for문                                      while문                                    do~   while문 
 횟수정해져있을때                       특정 상황이 주어질 때
                                    조건 만족 안하면 1번도 실행 안함                조건 만족 안해도 한번은 실행  
-----------------------------------------------------------------------------------------------------------------------------------
중첩이란?
반복문을 한 문장 안에 겹쳐 사용해 원하는 값 출력
반복문{반복문{}}

*대표문제
ex 1 
   11 
   111 
   1111 
   11111의 명령어는
 중첩을 이용해 하기

		System.out.print("1"); // println print line next의 약자로 엔터가 존재한다. 띄어쓰기가 된다.
		System.out.print("2"); // print는 엔터가 없어서 값만 찍는다. 이어져서 나온단 소리이다.
		System.out.println();
		System.out.print("3");
		System.out.println("4");

		for (int i = 1; i <= 5; i++) {
			for (int j = 1; j <= i; j++) {
				System.out.print("1");
			} 
			System.out.println();
		}

---------------------------------------------------------------------------------------------------------------
조건 분기문이란 ?
특정 조건에 따라 다른 문장을 실행시키고자 할때 사용한다.


프로그램은 절차지향이다. 하지만 선택적으로 실행하고 싶을 수 있을 때 조건분기문을 사용한다 .

 if(조건) {
	 문장1;
	 문장2;
                               <-특정 조건을 만족하면 {}안의 문장1,2을 실행한다 .
 }else if(조건){               <-if조건을 만족하지 않는다면 else의 if조건을 만족하는지 보고 {}문장3,4를 실행한다.
  문장3;
  문장4;
 }else{                        <-else if도 만족하지 않는다면 else의 {} 문장 5,6을 실행한다.      
  문장5; 
  문장6;
 }


ex)

public class StatementEx6 {// main method 시작      
                                          //sysout in 을 사용하기위한 옵션
	public static void main(String[] args) throws IOException {

		System.out.print("숫자 입력:");
		int value = System.in.read();
		System.out.println(value);
		 value-=48;
		 System.out.println(value);
		 int result = value%2;                           <-value에서 2를 나눈 나머지 값
		 if(result == 0) {                               <-result=0은 대입이라 x
			   System.out.println(value + "는 짝수");
		 }else{
			  System.out.println(value+"는 홀수");
		 }
                 
		 결과값
		 숫자 입력:5
                  53
                  5
                  5는 홀수


                
       
	}

}


	




Text만들기 + scroll 바 만들기 
JTextARE
멤버 변수 
JTextArea 변수이름;
JScrollPane 변수이름;

JTextArea 변수이름 = new JTextArea();
JScrollPane 변수이름 = new JScrollPane(JTA, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,     <-수직 수평 으로 스크롤바를 하고 필요할때마다 생기게 만든다.
				                              JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);        <-수직,수평 순서로 해야한다.

------------------------------------------------------------------------------------------------------------------------------------------------------
상단 메뉴 바 만들기 
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;

JMenuBar  변수이름; 
JMenu     변수이름; 
JMenuItem 변수이름;

JMenubar는 상단에 MENU를 만들 수 있는 bar를 만드는 것이고 JMenu는 bar에 있을 category를 만든다. 
JMenuItem은 JMenu 안에 있을 내용을 생성하게 된다. 

                  
메뉴 bar ->FILE -NEW      
               - OPEN
	       - SAVE
	       - EXIT          
         
	 ->HELP -HELP 

ex)
JMenuBar JMB;
JMenu jmFile, jmHelp;
JMenuItem jmiNew, jmiOpen, jmiSave, jmiExit, jmiHelp;

생성자(){
jmiNew = new JMenuItem("New");     <-생성
jmiOpen = new JMenuItem("OPEN");
jmiSave = new JMenuItem("SAVE");
jmiExit = new JMenuItem("EXIT");
jmiHelp = new JMenuItem("HELP");

jmFile = new JMenu("File");
jmHelp = new JMenu("Help");

jmFile.add(jmiNew);               <-생성된 요소들을 더 큰 분류 위에 올리기 
jmFile.add(jmiOpen);
jmFile.add(jmiSave);
jmFile.add(jmiExit);

jmHelp.add(jmiHelp);  

JMB.add(jmFile);                  <-최종적으로 MenuBar 위에 올리기 
JMB.add(jmHelp);

setJMenuBar(JMB);                 <- 만들어진 MENUBAR를 메모장 판 위에 올리고 끝낸다. 
}
---------------------------------------------------------------------------------------------------------------
만들어진 MENUBAR에 있는 요소들에 기능 부여하기
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

class
생성자(){MenuItem이름.addActionListener(this);}
@Override
	public void actionPerformed(ActionEvent e) {기능}


만들어진 MENUBAR들에 기능을 부여하기 위해선 클릭시 반응을 인식하도록 해야하고 
그 안에서 METHOD를 통해 원하는 반응이 이루어지도록 해야한다. 


ex)
1)EXIT을 눌렀을때 종료가 되도록 만들기.
2)NEW를  눌렀을때 선택 창이 뜨고 난 후 메모장에 글자가 있다면 가져오고 아니면 초기화 시키기  
3)OPEN을 눌렀을때 파일 불러오기 기능 만들기 
4)SAVE를 눌렀을때 저장 기능 만들기 
5)Help를 눌렀을때 이전에 만들어 놓았던 class불러오기 

*
필요한 method 
클릭 시  
1)e.getSource(); 
클릭 시 object로 값을 return한다. e.getActionCommand();는 String으로 넘어와 같은 언어를 사용할 경우 보기 편하지만 
 만약 다른 언어를 사용할 경우엔 판단하기 어려워지는 경향이 있다. 때문에 object로 넘어오는 getSource를 많이 쓴다. 

EXIT
1)dispose(); 
창을 하나 씩 종료한다. 만약 System.Exit(0);을 쓰게 되면 여러개의 창을 띄웠을 경우 의도치 않은 창도 모두 종료 되기 때문에 
하나의 창만을 종료하는 dispose();를 사용하는 것이 낫다. 

New
1)JOptionPane.showConfirmDialog(parentComponent, message, title, class이름.optionType);
선택창을 생성한다.message는 선택창을 띄운 목적을 사용자에게 물어보고
title은 선택창의 제목, optionType은 선택창 내에 YES NO CANCEL 옵션을 넣을 수 있도록 해준다. 
JOptionPane.YES_NO_CANCEL_OPTION
JOptionPane.YESL_OPTION
JOptionPane.NO_OPTION
JOptionPane.CANCEL_OPTION등이 있다.

Open
1)
JFileChooser 변수이름 = new JFileChooser();
int 변수이름=Chooser의 변수이름.showOpenDialog(this);
if (변수이름 == JFileChooser.APPROVE_OPTION)
File 변수이름 = JFC.getSelectedFile();
열기 창이 나오도록 하는 옵션이다. int 값으로 주어진다.
다이얼로그 창에서 열기가 정상적으로 수행된경우 0 을 반환 하고, 
취소를 누른경우 1을 반환 한다.
조건문에서 JFileChooser 에는 몇가지 상수가 정의되어 있는데,
APPROVE_OPTION (상수 0) 즉, 파일열기를 할경우 0이 result 변수에 들어가고, 파일열기를 했을때 사용되는 상수인 APPROVE_OPTION 과 비교하여
정상적인 열기가 이루어졌을때 조건문이 수행 된다.
열기창이 열린 후 파일 클릭식 getSelecteFile(); method에 의해 경로가 저장된다. 

SAVE
JFileChooser JFC = new JFileChooser();
int 변수이름 = JFC.showSaveDialog(this);
if (변수이름 == JFileChooser.APPROVE_OPTION) {
File f= JFC.getSelectedFile();}
Open과 동일하다.



생성자(){
기본셋팅
jmiExit.addActionListener(this);
jmiNew.addActionListener(this);
jmiOpen.addActionListener(this);
jmiSave.addActionListener(this);
jmiHelp.addActionListener(this);}


public static void main(String[] args) {
		MemoJJang ex = new MemoJJang("제목없음-메모장");
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// String cmd = e.getActionCommand();
		Object cmd = e.getSource(); // object로 넘어온다 객체지향이니 객체로 하자
		if (cmd == jmiExit) {
			
			//System.exit(0);
		} else if (cmd == jmiNew) {
			// jta에 글자가 있다면 가져오기.
			String data = JTA.getText();
			data.length();
			if (data.length() != 0) {
				int result = JOptionPane.showConfirmDialog(this, "저장할래?", "메모장", JOptionPane.YES_NO_CANCEL_OPTION);
				//JOptionPane.showConfirmDialog(parentComponent, message, title, optionType)
				System.out.println("누른버튼 : " + result); // <-예 아니오 캔슬은 0,1,2가 나온다. RESULT변수에 대입햇으니 RESULT에 나온다.
				if (result == JOptionPane.YES_OPTION) {
					// 저장버튼
					System.out.println("저장하자..");
				}
				if (result == JOptionPane.NO_OPTION) {

				}

			} // <- 알람 뜨게 해주는 기능 S=STATIC 채워져있는것은 PUBLIC

			JTA.setText("");
			// "생성하는 것.cmd "
		} else if (cmd == jmiOpen) {
			System.out.println("열기 메뉴아이템 선택");
			// 파일을 선택
			JFileChooser JFC = new JFileChooser(); // <-파일 추져를 통해 열기창 나오도록한다.
			int result = JFC.showOpenDialog(this);
			if (result == JFileChooser.APPROVE_OPTION) {
				// 파일 I/O
				File f = JFC.getSelectedFile(); // 파일로부터 이름을 가져와서 찍으라.
				System.out.println(f.getName());
			}
			// JOptionPane.showOptionDialog(this, "열기"," 열기",JOptionPane, messageType, icon,
			// options, initialValue)

		} else if (cmd == jmiSave) {
			System.out.println("저장하기");
			JFileChooser JFC = new JFileChooser("c:\\"); //<"c:\\"이걸 넣어주면 c드라이브가 처음에 열린다. <-운영체제가 바뀌었을때를 감안해야해서 종속적으로 하게 되면 오류가 생긴다. 안좋은 선택. (리눅스는 최상위 디렉토리가 루트.)
			int result = JFC.showSaveDialog(this);
			if (result == JFileChooser.APPROVE_OPTION) {
               File f= JFC.getSelectedFile();
               System.out.println(f.getName());
			}
		}else if(cmd == jmiHelp) {
			
			new SwingEx1();  //전에 만든 창이 뜬다. 
			
		}





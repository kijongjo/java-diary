기본 셋팅
import java.awt.Button;
import java.awt.Frame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class ButtonControl extends Frame{
Button btn;
ButtonControl() {
		btn = new Button("^^");
		setLayout(null);
		btn.setBounds(200, 400, 50, 50);
		add(btn);
		btn.setBounds(200, 200, 50, 50);
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				// TODO Auto-generated method stub
				super.windowClosing(e);
				System.exit(0);
			}
		});
		setBounds(100, 100, 800, 600);
		setVisible(true);
    }
    
    키보드에 대한 반응과 관여된 class를 호출해야한다 
    import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

클래스에
implements KeyListener

생성자(){btn.addKeyListener(this);}

셋팅을하면 override가 필요한 method가 나오게 된다.
@Override
	public void keyTyped(KeyEvent e) {	 
 }

	@Override
	public void keyPressed(KeyEvent e) {              <-키보드 누를때
 }
  @Override
  public void keyReleased(KeyEvent e) {             <-키보드 땔때
 }
 
 
 여기서 필요한 것은 키보드 누를때 움직이는 것이다 .
 
 public void keyPressed(KeyEvent e) {
	
	int code=e.getKeyCode();
	System.out.println(code);     <-아스키 코드로 나오게 된다. 
	int x = btn.getX();           <-버튼의 위치를 변수로 잡는다.
	int y = btn.getY();

방향키의 아스키 코드를 확인 한 다음 
if(code == 37) {
		x-=20;                  <-만약 code의 값이 아스키 코드이 37이라면  x변수를 20만큼 감소시킨후 
	}
	btn.setLocation(x,y);    <-위치 값에 대입시킨다. 
	if(code == 39) {
		x+=20;
	}
	btn.setLocation(x,y);
	if(code==38) {
		y-=20;
	}
	btn.setLocation(x,y);
	if(code==40) {
		y+=20;
	}
	btn.setLocation(x,y);

점프와 비슷하게 만드는 방법 
for문을 써준다 위로 올라가는것을 자동으로 만들고 이후 내려가는 것을 자동으로 만든다.
if(code==32) {
		for (int i = 0; i <=30; i++){          <-대각선 위로 점프
			x+=2;
			y-=2;
		btn.setLocation(x,y);
    for (int i = 0; i <=30; i++) {         <-대각선 아래로 점프 
			x+=2;
			y+=2;
			btn.setLocation(x,y);
      
      
      만약 for문의 속도 즉 점프속도를 빠르게 하고자 한다면 
      	try {
			Thread.sleep(25);                             <-sleep(수)에서 수는 속도를 말하는데 1000이 1초이다. 수가 내려가면내려갈수록 빨라진다.
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} 를 해준다. sleep(수)에서 
    
    if(code==32) {
		for (int i = 0; i <=30; i++){
			x+=2;
			y-=2;
		btn.setLocation(x,y);
    	try {
			Thread.sleep(25);
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} //1000이면 1초

----------------------------------------------------------------------------------------------------------------------------
전체 소스
package day14;
//키보드 리스터 사용
import java.awt.Button;
import java.awt.Frame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class ButtonControl extends Frame implements KeyListener {
	Button btn;

	ButtonControl() {
		btn = new Button("^^");
		setLayout(null);
		btn.setBounds(200, 400, 50, 50);
		add(btn);
		btn.setBounds(200, 200, 50, 50);
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				// TODO Auto-generated method stub
				super.windowClosing(e);
				System.exit(0);
			}
		});
		setBounds(100, 100, 800, 600);
		setVisible(true);

		btn.addKeyListener(this);
	}

	public static void main(String[] args) {

		new ButtonControl();// 굳이 참조변수에 안담아도 된다.쓸일이 없다면.

	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyPressed(KeyEvent e) {//키보드를 누를때
		// TODO Auto-generated method stub
		int code=e.getKeyCode();
	System.out.println(code);   //<-아스키 코드로 나오게 된다. 
	int x = btn.getX();
	int y = btn.getY();
	if(code == 37) {//방향키 왼쪽 아스키코드
		x-=20;
	}
	btn.setLocation(x,y);
	if(code == 39) {
		x+=20;
	}
	btn.setLocation(x,y);
	if(code==38) {
		y-=20;
	}
	btn.setLocation(x,y);
	if(code==40) {
		y+=20;
	}
	btn.setLocation(x,y);
	if(code==32) {
		for (int i = 0; i <=30; i++) {
			x+=2;
			y-=2;
		btn.setLocation(x,y);
		try {
			Thread.sleep(25);
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} //1000이면 1초
		}
		for (int i = 0; i <=30; i++) {
			x+=2;
			y+=2;
			btn.setLocation(x,y);
			try {
				Thread.sleep(25);
			} catch (InterruptedException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} //1000이면 1초
			}
			
			
			
		
		
		}
	}

	

	@Override
	public void keyReleased(KeyEvent e) {//키보드를 뗄떼
		// TODO Auto-generated method stub
		
	}
}



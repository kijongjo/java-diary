최우선            .(dot),(), cast 연산자
증감              ++,--
산술              +,-,*,-,%
시프트            >> or <<, >>> or <<<
비교              >,<,>=,==(같다의 표시),<=
비트              true :1 ,false :0, and : &, or: |
논리               &&,||
조건              (조건문)?"참일경우의값":"거짓일경우의값"(삼항연산자의 경우)
대입              =, += , -=,*=,/=

-------------------------------------------------------------------------------------------------------------------------------
최우선 연산자 -0순위
 .(dot),(), cast 연산자
* cast 연산자란?
 서로 다른 자료형간 연산을 하기 위해서는 형을 변환시켜줘야 하는데, 이를 캐스팅이라고 한다.
 보통 캐스트 연산자는 (자료형) 의 형태로 표현한다. (int)과같이 써 주면 int형으로 바뀌게 된다.
 


-------------------------------------------------------------------------------------------------------------------------------
증감 연산자 -1순위
++,--
  
   ++는 주어진 값에 1증가하는 연산자
  
  a 변수의 값에 1을 더한값을 다시 a 변수에 할당하라
		
 
 ex)int a = 100;

		 a=a+1;
		 b=a;
		int b = ++a;
 -------------------------------------------------------------------------------------------------------------------------------
산술 연산자 -2순위
+,-,*,-,%
%는 나머지를 구하게 해주는 연산자이다.
ex)
System.out.println("a%b" + (a % b)); 처럼 사용
------------------------------------------------------------------------------------------------------------------------------
shift 연산자 -3순위

*2진법 계산 방법
ex)
                byte b = 10;
		System.out.println("b>>2:" + (b >> 2));
		System.out.println("b<<2:" + (b << 2));
 10을 2로 나누면 5 나머지 0 ,5를 2로 나누면 4 나머지 1, 4를 나누면 2 나머지 0 이 되고 2를 나누게 되면 1이 남는다.
 이것을 이진법으로 표현하게 되면 나머지로 표현하게 되는데 뒤에서부터 적용해 byte는 8칸중에 ???? 1010 -> 0000 1010이 된다.

shift 연산자의 적용

표현식 >> or <<
 여기에서 shift 연산자로 0000 1010에서 오른쪽으로 밀게 되면(>>) ??00 0010 -> 0000 0010 되어서 값은 2진법에의해
                   2가 된다.
		   여기에서 shift 연산자로 0000 1010에서 왼쪽으로 밀게 되면(<<) 0010 10??-> 0010 1000이 되어서
		   2^72^62^52^42^32^22^12^0에서 2^5과 2^3만 남아 32+8을 해 40이 된다.
좀 더 수학적인 규칙으로 표현을 하게 되면 
오른쪽 세칸 민다 = 나누는 효과 , 왼쪽 세칸 민다 = 곱하는 효과 (곱하는 수는 칸수에 따라 2^n n=칸수 2칸 민다 n=2)

*쓰이는 상황
컴퓨터는 미는게 더 편해서 연산이 더 빠르다. 가독성이 매우 떨어진다. 하지만 게임같은 고성능을 요구하는 상황에서 많이 사용한다.
		
* <<< or >>>		
		byte b2 = 80;
		System.out.println(b2 >> 3);
		System.out.println(b2 << 3);
		 <<: 왼쪽으로 밀고 남는 자리는 0으로 채움
		 <<<: 왼쪽으로 밀고 , 남는 자리를 1로 채움 
		 양수면 <<나 <<<나 값은 같아질 수있으나 음수의 경우 다를수있음.
-------------------------------------------------------------------------------------------------------------------------------------
비교연산자    -4순위
>,<,>=,==(같다의 표시),<=

java의 같다는 ==를 사용한다 =는 대입의 표시
-------------------------------------------------------------------------------------------------------------------------------------
비트 연산자  -5순위
비트 단위로 연산한다.
boolean : true :1 ,false :0로    표현
          and : &, or: |의 기호로 표현


ex)
                     0000 1010
		     0001 0110
		   &|------------
		     ffff fftf -> a&b는 2가 출력
                   =(0000  0010)
		   
		     0000 1010
		     0001 0110
		   ||------------
		     ffft tttf -> a&b는 가 30출력
		    =(0001 1110) 
		    
ex) byte k1 = 13;
		byte k2 = 17;
		System.out.println(k1 | k2);
		System.out.println(k1 & k2);           <- |& 표현식

		boolean b1 = true;                     <- boolean 표현식
		boolean b2 = false;
		System.out.println(b1 & b2);
		    
-------------------------------------------------------------------------------------------------------------------------------------
논리연산자 -6순위
  &&,||
  
  ex)
   boolean b1=true;
     boolean b2=false;
     
     //출력 b1과 b2를 비교하여 
     System.out.println(b1&&b2);
     //출력 b1또는 b2를 비교하여
     System.out.println(b1||b2);
     System.out.println("=================");
	//비트연산과의 차이는?
     byte c1 = 10;
     byte c2 = 20;
     
     System.out.println(c1+c2);
     
     //System.out.println(c1&&c2)불가  <- 정수형 변수에 대해서 논리연산자 불가능하다.
     
      
-------------------------------------------------------------------------------------------------------------------------------------
삼항 연산자 -7순위
     
단항 연산자: 항목이 하나인 연산자 항목++
이항 연산자: 항목이 두개인 연산자 항목+항목,-
삼항 연산자: (조건 항목)?"참 항목":"거짓 항목"
public class OperEx7 {
	public static void main(String[] args) {
		
 (조건문)?"참일경우의값":"거짓일경우의값"         
ex) 
(5<4)? 50: 40                             <-4가 5보다 크다면? 참일 경우 50이 출력 거짓일 경우 4가 출력된다.
------------------------------------------------------------------------------------------------------------------------------------
대입 연산자  -8순위
=, += , -=,*=,/=

	
     
     
     

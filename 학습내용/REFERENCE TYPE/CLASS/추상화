 추상화 
 구체적인 사실들을 일반화 시켜 기술한것.
              
 ex)
 개 토끼 고래 간에는 공통점이 있다.포유류 CLASS를 만들수가있다. 
 이러한 공통점을 모아서 상위 CLASS를 만드는 것을 추상화라고 한다.



 반대로 오히려 개별특성들을 좀더  내려가는것을 구체화라고 한다. 

주의할 점 
overriding을 위한 추상 method에서 ()안의 매개변수는 지정해주어야 한다. 
수정할 수 있는 것은 {}이다. overriding을 위해선 ()안의 매개변수 순서에 따라 찾아 식별한 후에 들어가기 때문이다.




------------------------------------------------------------------------------------------------------------------------
추상 class 

 상속 목적으로 개념상 존재하는 클래스가 
	m이라는 객체가 생긴다는게 이상한 것이다. 즉 분류목적으로 사용되는 상위 class가 인스턴스화 되는 문제가 발생 할 수 있다.
 만들지 못하게 막는 방법은 class 부분에 abstract를 넣어준다.
 
ex)

  포유류는 객체가 될 수 없다. 
  포유류라는 이름을 가진 동물은 없기 때문. 진짜로 존재하는 애가 아니다.
	 그래서 만들지 못하게 막는 방법은 class 부분에 abstract를 넣어준다.
  
  public abstract class 포유류 
--------------------------------------------------------------------------------------------------------------------------
추상 method
abstract void or datatype ();  
추상 class 내에 있는 method로 하위 class 안에 있는 method와 공통적인 method를 가지지만 그 내용은 전부 달라서 상위 class내에 있는 
method에 method body를 지정할 수 없을 때 사용하는 것이다.어차피 method body를 따로 적을 거 왜 상위 class에 넣어 두는지 의문이 들 수 있지만
새로운 하위 class를 만들 때 하나의 틀로 작용하는 것이다. overriding을 하는 것인데 만약 상위 class에서 공통된 method에 대해 abstract를 붙여주면 
새로운 하위 class를 만들 때 abstract를 넣어준 method를 추가하지 않으면 오류가 나게 된다.왜냐하면 부모 class의 abstract method를 지정하는 것은
자식 class에서  overriding을 시키라는 명령어와 같기 때문이다.  
주의할 점 
method body만 자유롭게 대입할 수 있도록 만드는 것이지 signature인 ()도 자유로 두면 안된다. 즉 매개변수도 자유롭게 설정할 수 있게 하면 안된다.
이유: overriding을 하기 위해선 그 method가 같은 method인지 먼저 식별해야하는데 식별하기 위해선 매개변수의 순서로 찾기 때문이다. 
부모 class
public abstract void 먹기();
자식 class
@Override
public void 먹기() {
	// TODO Auto-generated method stub
	 System.out.println("냠냠")
}


class란                 객체의 설계도
class 구성요소           member변수 생성자 method
class 정의 내리기        속성 특징, 동작
데이터 저장 원리         stack에 참조값 heap
생성자                   생성자(){전역매개변수들의 초기값 지정을 위한내용}
객체 지향언어의 특징     필요할 때마다 꺼내 쓰기 때문에  꼬여도 상관없다.
-------------------------------------------------------------------------------------------------------------
CLASS란? 
객체의 설계도이다. 만들고 싶은 객체(혹은 프로그래밍 안으로 들여오고싶은 물건)의 [속성,특징]과 [행동]을 
정의 내리는 것을 말한다. 
--------------------------------------------------------------------------------------------------------------
CLASS의 구성요소 
1. MEMBER 변수(=MEMBER 필드)
2. 생성자
3. MEMBER method

--------------------------------------------------------------------------------------------------------------
CLASS 정의 내리기(=객체 모델링)
-객체 특징 동작을 넣는 class에는
[속성,특징]
int 속성이름;            <-수로 표현해야 하는경우 
String 속성이름;         <-문자로 표현해야 하는경우
[동작,행위]
void 행위(){행위 내용};
- class를 통해 정의된 종류의 객체를 표현하는 class에는
class이름 객체이름 = new class이름(); <- 객체가 생성된다.
객체이름.행동();                      <-행동에 대한 method가 출력된다.
객체이름.속성=원하는값;                <-객체의 정보가 추가된다.


ex)
package day08;

public class Marine {
	

	int hp, x, y;
	int 사거리, 공격력, 방어력, 공격속도;                  <-
	int 이동속도;

	
	Marine() {
		hp = 200;
		x = 1;
		y = 2;
		공격력 = 8;
		공격속도 = 20;
		방어력 = 0;
		사거리 = 10;
		이동속도 = 12;

	}

	Marine(int a) {
		hp = a;
		x = 1;
		y = 2;
		공격력 = 8;
		공격속도 = 20;
		방어력 = 0;
		사거리 = 10;
		이동속도 = 12;
		System.out.println("매개변수 있는 생성자");
	}

	void 공격하기() {
		System.out.println("두두두");
	}

	void 이동하기() {
		System.out.println("gogogo");
	}

	void 정지() {
		System.out.println("정지..");
	}

	void 스팀팩() {
		System.out.println("스팀팩");
	}

	void 상태보기() {
		System.out.println("------------");
		System.out.println("체력" + hp);
		System.out.println("x" + x);
		System.out.println("y" + y);
		System.out.println("공격속도:" + 공격속도);

	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public class TestMain3 {
	public static void main(String[] args) {

		Marine Marine1 = new Marine(); 
		Marine1.hp = 80;
		Marine1.x = 1;
		Marine1.y = 2;
		Marine1.공격력 = 8;
		Marine1.공격속도 = 20;
		Marine1.방어력 = 0;
		Marine1.사거리 = 10;
		Marine1.이동속도 = 12;

		Marine1.공격하기();
		Marine1.스팀팩();
		Marine1.이동하기();
		Marine1.정지();

		System.out.println("hp: " + Marine1.hp);
		System.out.println("x: " + Marine1.x);
		System.out.println("y: " + Marine1.y);
		System.out.println("공격력: " + Marine1.공격력);
		System.out.println("공격속도: " + Marine1.공격속도);
		System.out.println("방어력: " + Marine1.방어력);
		System.out.println("사거리: " + Marine1.사거리);
		System.out.println("이동속도: " + Marine1.이동속도);

*용어정리
참조변수(=class 이름) = new(=객체 할당 연산자) 생성자();  
instance:메모리에 할당된 객체로 하나의 클래스로부터 여러개의 인스턴스를 생성할 수 있다. 
-------------------------------------------------------------------------------------------------------------
데이터 저장 원리
Car class를 만들고 난후
Car c= new Car();에서

sysout(c);를 하고 나면 
 결과→c: day08.Car@15db9742라는 참조값이 나온다. 
 
 이는 heap에 class를 생성한 후 stack에는 주소와 공간을 만든다음 stack에 있는 주소를 따라 들어가 heap을 수정하는 것이다. 
 
 System.out.println(c.바퀴);에서 
 .은 dot 연산자(최우선 연산자)로 c의 참조값을 따라서 heap에 접근해 heap에 있는 구성요소중 하나(.여기적혀잇는것)을
 출력하라라는 의미이다.

-------------------------------------------------------------------------------------------------------
생성자란?
class 명과 똑같은 이름을 가지는것 .
객체의 초기화를 담당한다.(변수의 초기값들을 미리 지정한다. )
리턴값은 없지만 void라는 키워드를 사용하지 않는다. 
void가 있으면 생성자가 아니라 일반 메소드가 되어버린다. 


*종류
매개 변수가 없는 생성자 
생성자(){전역매개변수들의 초기값 지정을 위한내용}
Marine() {// 매개변수가 없는 생성자 .
		hp = 200;
		x = 1;
		y = 2;
		공격력 = 8;
		공격속도 = 20;
		방어력 = 0;
		사거리 = 10;
		이동속도 = 12;

	}




매개 변수가 있는 생성자
생성자(데이터타입){전역매개변수들의 초기값 지정을 위한 내용}
Marine(int a) {
		hp = a;
		x = 1;
		y = 2;
		공격력 = 8;
		공격속도 = 20;
		방어력 = 0;
		사거리 = 10;
		이동속도 = 12;
		System.out.println("매개변수 있는 생성자");
	}
  
  객체 있는 class에 
  Marine Marine2 = new Marine(200); <-int a에 200값이 들어가고 hp=a;의 값이 변한다. 
  
  
 *생성자의 특징
  생성자가 따로 없다면 매개변수없는 생성자(기본생성자)가 1개 존재하는것으로 처리해준다(virtual machine이 판단한다.)
   기본 생성자는 멤버변수의 값을 기본 값으로 초기화 해준다. (0 or null)

 *생성자 overloading
 Class 이름(데이터 타입1){}
 Class 이름(데이터 타입2){} 다른 것들과 마찬가지로 데이터 타입 순서에 따라 구분한다. 
 
 *생성자 tip -this의 사용 
이름=이름;(x)
보통 변수에서 가장 가까운 변수를 찾는데  오른쪽에 오는 이름은 String 이름을 참고한다. 
하지만 왼쪽에 오는 이름은 전역변수를 참고 해야 하는데 특성상 가장 가까운 변수를 참고하기 때문에 String 이름을 참고해 오류가 난다.
그것을 막기위해 왼쪽에 this.이름이라고 표현을 해주어 전역변수를 참고한다는 것을 직접 가리켜 주어야 한다.
this는 자기자신을 가리키는 참조변수이다.
하지만 만약 혼동 되지 않는다면 ex)이름=이름1 생략한체 사용한다.
 ex)
 class 지정 class
 Human01(String 이름, int 나이, String 직업) {
		
		this.이름 = 이름;
	        this.나이 = 나이;
		this.직업 = 직업;
 }
 객체 있는 class
 Human01 h2 = new Human01("구마적", 25, "남", "000-0000-0000");
 ------------------------------------------------------------------------------------------------------------------------------
 객체 지향 언어의 특징
 객체 지향 프로그램에서는 object가 중요하다.(자바는 객체지향 언어이다.)
 
 * 객체 지향의 장점
절차지향 언어: 순서가 조금만 바뀌어도 몽땅 바뀌어야 한다. 
객체 지향 : 필요에 따라 불러와 사용하기 때문에 순서를 고려할 일이 적어진다.

* 객체를 프로그래밍 안으로 들여오는데 변환되는 내용과 그에 맞는 요소들
object      ==> class 
속성,특징      멤버 변수       
행위,동작      멤버 메서드

*객체 생성 instance
클래스명 참조변수 = new 생성자();

*속성 또는 행동 불러오기
참조변수.멤버변수
참조변수.메서드명();

생성자               ==>객체를 초기화 할 목적으로 가지고 있는 메소드
생성자가 1개도 없으면 ==>기본생성자는 존재하는 것으로 처리

기본생성자==>멤버 변수의 기본값
 
